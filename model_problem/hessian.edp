verbosity = 0;
bool plots = true;

// Options ----

real hmin = 1e-2;
real err = 1e-3;
int nbvx = 1e6; 
bool iso = false;
int maxiter = 10;


// Data ----

include "../data/data_scenario_0.idp"
// include "../data/data_scenario_1.idp"
// include "../data/data_scenario_2.idp"


// Problem discretization ----

// Mesh
mesh Th = square(20, 20);
if(plots) plot(Th, wait = true);

// Functional spaces
fespace Vh(Th, P2);
Vh uh, vh;

// Diffusion tensor discretization
Vh d11h, d12h, d22h;
d11h = d11;
d12h = d12;
d22h = d22;

// Weak-formulation
problem Poisson(uh, vh, solver = CG, eps = 1e-6) = 
    int2d(Th)(
        d11h*dx(uh)*dx(vh) + 
        d12h*dx(uh)*dy(vh) + 
        d12h*dy(uh)*dx(vh) +
        d22h*dy(uh)*dy(vh) ) -
    int2d(Th)( f*vh ) + 
    on(1,2,3, uh = gD1) +
    on(4, uh = gD2);




// Adaptation loop ----

int niter = 0;
while(niter < maxiter) {
    Poisson;
    Th = adaptmesh(Th, uh, err=err, hmin = hmin, iso = iso, nbvx = nbvx);
    if(plots) plot(Th, wait = true);
    niter ++;
}

if(plots) plot(Th, cmm = "Adapted mesh", fill = false, wait = true);
if(plots) plot(uh, fill = true, wait = true);
if(plots) plot(Th, uh, fill = false, wait = true);

cout << "Number of triangles: " << Th.nt << endl;