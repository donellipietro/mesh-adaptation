include "utils.idp"

verbosity = 0;
bool plots = false;

// Options ----

real TOL;
int nitermax = 20;
real hmin = 1e-2;
real hmax = 0.05;
int nbvx = 1e6;


// Data ----

// include "../data/data_scenario_1.idp"
include "../data/data_scenario_2.idp"

if(scenario == 1) TOL = 15.4; // 15.35, 15.3
if(scenario == 2) TOL = 17.;  // 16.75, 16.5


// Problem discretization ----

// Mesh
mesh Th = square(20, 20);
if(plots) plot(Th, wait = true);

// Functional spaces
fespace Vh(Th, P1);
fespace VhP0(Th, P0);

// Discretized diffusion tensor components
Vh logd11h;
Vh logd12h;
Vh logd22h;

// gradient norm
varf vsqetaK(unused, chiK) = 
    int2d(Th)(
        chiK*(
            square(dx(logd11h)) + 2*(dx(logd12h))^2 + square(dx(logd22h)) +
            square(dy(logd11h)) + 2*(dy(logd12h))^2 + square(dy(logd22h))
        )
    );


// Adaptation loop ----

// Loop initialization
int niter = 0;
real eta = 1e9;
real etamin = 1e9;
int etacounter = 0; 

// Adaptation loop
while(niter < nitermax && etacounter < 15) {

    // Update evaluation
    logd11h = d11;
    logd12h = d12;
    logd22h = d22;

    // Compute etaK
    VhP0 sqetaK;
    sqetaK[] = vsqetaK(0, VhP0);
    if(plots) plot(sqetaK, cmm = "sqetaK " + niter,  wait=true, fill=true, value=true);

    // Check global gradient norm
    eta = sqrt(sqetaK[].sum);

    // Exit
    if(eta < TOL){
        if(eta < etamin){
            etamin = eta;
            etacounter = 0;
        } else {
            etacounter ++;
        }
    } else {
        if(eta < etamin){
            etamin = eta;
        }
    }

    // Compute hK (new)
    int Nh = Th.nt;
    VhP0 A = area;
    VhP0 Aref = 1;
    VhP0 hKnew = pow((TOL^2)/(Nh * Aref * (sqetaK/A)), 0.5);
    if(plots) plot(hKnew, cmm = "hK " + niter, wait=true, fill=true, value=true);

    // Averaging
    Vh hNnew;
    hNnew[] = averagingNodes(Th, hKnew[], hmin, hmax);
    if(plots) plot(hNnew, cmm = "hN " + niter, wait=true, fill=true, value=true);
    /*
    real hNmax = hNnew[].max;
    hNnew[] *= hmax/hNmax;
    for(int n = 0; n<hNnew[].n; n++) {
        if(hNnew[][n] < hmin) hNnew[][n] = hmin;
    }
    if(plots) plot(hNnew, cmm = "hN " + niter, wait=true, fill=true, value=true);
    */

    // Mesh adaptation
    Th = adaptmesh(Th, hNnew, IsMetric = true, nbvx = nbvx);
    // if(plots) 
    plot(Th, cmm = "Th " + niter, wait=1);

    // Current geometry
    VhP0 hK = hTriangle;
    cout << "Iteration: " << niter << endl;
    cout << "Nh: " << Nh << endl;
    cout << "hmin: " << hK[].min << endl;
    cout << "hmax: " << hK[].max << endl;
    cout << "etaK min: " << sqetaK[].min << endl;
    cout << "etaK max: " << sqetaK[].max << endl;
    cout << "eta: " + eta << endl;
    cout << "eta min: " + etamin << endl;
    cout << "eta counter: " + etacounter << endl;
    cout << endl;

    // Solve again
    niter++;

}

plot(Th, cmm = "Final Th", wait=1);

cout << "Number of triangles: " << Th.nt << endl;