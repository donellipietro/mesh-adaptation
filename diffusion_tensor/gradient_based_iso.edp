include "utils.idp"

verbosity = 0;
bool plots = false;

// Options ----

real TOL = 0.3;
int nitermax = 200;
real hmin = 1e-3;
real hmax = 0.05;
int nbvx = 1e6;


// Data ----

include "../data/data_scenario_1.idp"
// include "../data/data_scenario_2.idp"


// Problem discretization ----

// Mesh
mesh Th = square(20, 20);
if(plots) plot(Th, wait = true);

// Functional spaces
fespace Vh(Th, P1);
fespace VhP0(Th, P0);

// Discretized diffusion tensor components
Vh logd11h;
Vh logd12h;
Vh logd22h;

// gradient norm
varf vsqetaK(unused, chiK) = 
    int2d(Th)(
        chiK*(
            square(dx(logd11h)) + 2*square(dx(logd12h)) + square(dx(logd22h)) +
            square(dy(logd11h)) + 2*square(dy(logd12h)) + square(dy(logd22h))
        )
    );


// Adaptation loop ----

// Loop initialization
int niter = 0;
real etaKmax = 1e9;
real etaKmaxmin = 1e9;
int etacounter = 0;
real TOLint = TOL;
int abovecounter = 0; 

// Adaptation loop
while(niter < nitermax && etacounter < 10) {

    // Update evaluation
    int Nh = Th.nt;
    logd11h = logd11;
    logd12h = logd12;
    logd22h = logd22;

    // Compute etaK
    VhP0 etaK;
    etaK[] = vsqetaK(0, VhP0);
    etaK = sqrt(etaK);
    if(plots) plot(etaK, cmm = "sqetaK " + niter,  wait=false, fill=true, value=true);

    // Exit
    etaKmax = etaK[].max;
    if(etaKmax < TOL){
        if(etaKmax < etaKmaxmin){
            etaKmaxmin = etaKmax;
            etacounter = 0;
        } else {
            etacounter ++;
        }
    } else {
        abovecounter ++;
        if(abovecounter > 10) {
            TOLint = TOLint*0.9;
            abovecounter = 0;
        }
        if(etaKmax < etaKmaxmin){
            etaKmaxmin = etaKmax;
        }
    }

    // Info
    VhP0 hK = hTriangle;
    cout << "Iteration: " << niter << endl;
    cout << "TOL: " + TOL << endl;
    cout << "TOLint: " + TOLint << endl;
    cout << "above counter: " + abovecounter << endl;
    cout << "Nh: " << Nh << endl;
    cout << "hmin: " << hK[].min << endl;
    cout << "hmax: " << hK[].max << endl;
    cout << "etaK min: " << etaK[].min << endl;
    cout << "etaK mean: " << etaK[].sum / etaK[].n << endl;
    cout << "etaK max: " << etaKmax << endl;
    cout << "etaK max min: " << etaKmaxmin << endl;
    cout << "eta counter: " + etacounter << endl;
    cout << endl;

    // Compute hK (new)
    VhP0 AK = area;
    VhP0 Aref = 1;
    VhP0 hKnew = pow((TOLint^2)/(Aref * (square(etaK)/AK)), 0.5);
    if(plots) plot(hKnew, cmm = "hK " + niter, wait=true, fill=true, value=true);

    // Averaging
    Vh hNnew;
    hNnew[] = averagingNodes(Th, hKnew[], hmin, hmax);
    if(plots) plot(hNnew, cmm = "hN " + niter, wait=true, fill=true, value=true);

    // Mesh adaptation
    Th = adaptmesh(Th, hNnew, IsMetric = true, nbvx = nbvx);
    plot(Th, cmm = "Th " + niter, wait = false);

    // Update iterator
    niter++;

}

plot(Th, cmm = "Final Th", wait=1);
Vh gammah = gamma;
plot(Th, gammah, cmm = "Final Th", wait=1);

cout << "Number of triangles: " << Th.nt << endl;

savemesh(Th, "mesh/gradient_based_iso_s"+scenario+"_"+TOL+".mesh");