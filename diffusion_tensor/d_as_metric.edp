load "lapack"
include "utils.idp"

verbosity = 0;
bool plots = false;

// Options ----
real hmax = 7.5*1e-2;
int nbvx = 1e6;
real beta = 2.;


// Data ----

// include "../data/data_scenario_0.idp"
// include "../data/data_scenario_1.idp"
include "../data/data_scenario_2.idp"
// include "data/import_tensor.edp"


// Problem discretization ----

// Mesh
mesh Th = square(100, 100);
if(plots) plot(Th, wait = true);

// Functional spaces
fespace VhP1(Th, P1);
fespace VhP0(Th, P0);


VhP1 alphaN, gammaN, r10N, r11N, r20N, r21N;
VhP1 d11N = d11;
VhP1 d12N = d12;
VhP1 d22N = d22;
decomposeTensorField(Th, d11N[], d12N[], d22N[], alphaN[], gammaN[], r10N[], r11N[], r20N[], r21N[]);

// plot(gammaN, wait = true, fill = true, value = true);
// plot(alphaN, wait = true, fill = true, value = true);
// plot(r10N, wait = true, fill = true, value = true);
// plot(r11N, wait = true, fill = true, value = true);
// plot(r20N, wait = true, fill = true, value = true);
// plot(r21N, wait = true, fill = true, value = true);

for(int niter = 0; niter < 100; niter ++) {

    VhP1 gammabetaN = pow(gammaN, beta);
    VhP1 sqlaK = alphaN * gammabetaN;
    real hmaxtilde = hmax / sqrt(sqlaK[].max);

    VhP1 sqlambda1N = hmaxtilde^2 * alphaN * gammabetaN;
    VhP1 sqlambda2N = hmaxtilde^2 * alphaN / gammabetaN;
    VhP1 m11N = r10N^2 * 1./sqlambda1N + r20N^2 * 1/sqlambda2N;
    VhP1 m12N = r10N*r11N * 1./sqlambda1N + r20N*r21N * 1./sqlambda2N;
    VhP1 m22N = r11N^2 * 1./sqlambda1N + r21N^2 * 1./sqlambda2N;

    // plot(m11N, wait = true, fill = true, cmm = "m11N");
    // plot(m12N, wait = true, fill = true, cmm = "m12N");
    // plot(m22N, wait = true, fill = true, cmm = "m22N");

    Th = adaptmesh(Th, metric = [m11N[], m12N[], m22N[]], nbvx = nbvx);
    plot(Th, fill = false, wait = false);

}

plot(Th, cmm = "Adapted mesh", fill = false, wait = true);
plot(Th, gammaN, cmm = "Adapted mesh", fill = false, wait = true);
cout << "Number of triangles: " << Th.nt << endl;
