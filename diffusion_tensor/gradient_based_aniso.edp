load "lapack"
include "utils.idp"

verbosity = 0;
bool plots = false;

// Options ----

bool usingpatch = false;
real TOL = 0.5; // 0.15, 0.8; 0.75
int nitermax = 200;
real hmin = 1e-3;
real hmax = 1;
real ratiomax = 5;
int nbvx = 1e6;


// Data ----

// include "../data/data_scenario_1.idp"
// include "../data/data_scenario_2.idp"
// include "../data/import_tensor.edp"
include "../data/import_DTI.edp"


// Problem discretization ----

// Mesh
// mesh Th = square(20, 20);
// if(plots) plot(Th, wait = true);
mesh Th = ThData;
Th = adaptmesh(Th, 10., IsMetric = true);
plot(ThData, wait = true, cmm = "Original");
plot(Th, wait = true, cmm = "Starting point");




// Functional spaces
fespace Vh(Th, P1);
fespace VhP0(Th, P0);

// Discretized diffusion tensor components
Vh logd11h, logd12h, logd22h;

// errors
varf vg11K(unused, chiK) = int2d(Th)(chiK*(
    square(dx(logd11h)) + 
    2*square(dx(logd12h)) + 
    square(dx(logd22h))
));
varf vg12K(unused, chiK) = int2d(Th)(chiK*(
    (dx(logd11h))*(dy(logd11h)) + 
    2*(dx(logd12h))*(dy(logd12h)) +
    (dx(logd22h))*(dy(logd22h))
));
varf vg22K(unused, chiK) = int2d(Th)(chiK*(
    square(dy(logd11h)) + 
    2*square(dy(logd12h)) + 
    square(dy(logd22h))
));

// gradient norm
varf vsqetaK(unused, chiK) = 
    int2d(Th)(
        chiK*(
            square(dx(logd11h)) + 2*square(dx(logd12h)) + square(dx(logd22h)) +
            square(dy(logd11h)) + 2*square(dy(logd12h)) + square(dy(logd22h))
        )
    );



// Adaptation loop ----

// Loop initialization
int niter = 0;
real etaKmax = 1e9;
real etaKmaxmin = 1e9;
int etacounter = 0;
real TOLint = TOL;
int abovecounter = 0; 


// Adaptation loop
while(niter < nitermax && etacounter < 10) {

    // Update
    int Nh = Th.nt;
    logd11h = logd11;
    logd12h = logd12;
    logd22h = logd22;

    // Compute etaK
    VhP0 etaK;
    etaK[] = vsqetaK(0, VhP0);
    etaK = sqrt(etaK);
    if(plots) plot(etaK, cmm = "sqetaK " + niter,  wait=false, fill=true, value=true);

    // Exit
    etaKmax = etaK[].max;
    if(etaKmax < TOL){
        if(etaKmax < etaKmaxmin){
            etaKmaxmin = etaKmax;
            etacounter = 0;
        } else {
            etacounter ++;
        }
    } else {
        abovecounter ++;
        if(abovecounter > 3) { // 10
            TOLint = TOLint * 0.9; // 0.75
            abovecounter = 0;
        }
        if(etaKmax < etaKmaxmin){
            etaKmaxmin = etaKmax;
        }
    }

    // Info
    VhP0 hK = hTriangle;
    cout << "Iteration: " << niter << endl;
    cout << "TOL: " + TOL << endl;
    cout << "TOLint: " + TOLint << endl;
    cout << "above counter: " + abovecounter << endl;
    cout << "Nh: " << Nh << endl;
    cout << "hmin: " << hK[].min << endl;
    cout << "hmax: " << hK[].max << endl;
    cout << "etaK min: " << etaK[].min << endl;
    cout << "etaK mean: " << etaK[].sum / etaK[].n << endl;
    cout << "etaK max: " << etaK[].max << endl;
    cout << "etaK max min: " << etaKmaxmin << endl;
    cout << "eta counter: " + etacounter << endl;
    cout << endl;

    // Compute gradient
    VhP0 g11K, g12K, g22K;
    g11K[] = vg11K(0, VhP0);
    g12K[] = vg12K(0, VhP0);
    g22K[] = vg22K(0, VhP0);
    if(plots) plot(g11K, cmm = "g11K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(g12K, cmm = "g12K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(g22K, cmm = "g22K " + niter,  wait=true, fill=true, value=true);

    // Compute gradient matrix
    VhP0 AK = area;
    VhP0 APatchK;
    VhP0 G11K, G12K, G22K;
    int[int] patchesSize(Th.nt);
    computeGradientMatrix(Th, APatchK[], patchesSize, usingpatch, g11K[], g12K[], g22K[], G11K[], G12K[], G22K[]);
    if(plots) plot(G11K, cmm = "G11K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(G12K, cmm = "G12K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(G22K, cmm = "G22K " + niter,  wait=true, fill=true, value=true);

    // Metric at elements
    VhP0 sqeta1K, sqeta2K, invsqlambda1K, invsqlambda2K, r10K, r11K, r20K, r21K;
    real[int][int] MK(3);
    MK[0].resize(Th.nt);
    MK[1].resize(Th.nt);
    MK[2].resize(Th.nt);
    for(int k = 0; k < Th.nt; k++){
        // Gradient matrix on K
        real[int, int] GK(2,2);
        GK(0,0) = G11K[][k];
        GK(0,1) = G12K[][k];
        GK(1,0) = G12K[][k];
        GK(1,1) = G22K[][k];
        real[int] ev(2);
        real[int, int] eV(2, 2);
        // Matrix diagonalization
        EVD(GK, ev, eV, true);
        // Metric elements
        r10K[][k] = eV(0,1);
        r11K[][k] = eV(1,1);
        r20K[][k] = eV(0,0);
        r21K[][k] = eV(1,0);
        real Aref = 1;
        sqeta1K[][k] = ev[0];
        sqeta2K[][k] = ev[1];
        invsqlambda1K[][k] = ( (Aref*patchesSize[k]) * (sqeta2K[][k]/APatchK[][k]) ) / (TOLint^2);
        invsqlambda2K[][k] = ( (Aref*patchesSize[k]) * (sqeta1K[][k]/APatchK[][k]) ) / (TOLint^2);
        // check aspect ratio
        real ratio = sqrt(invsqlambda2K[][k] / invsqlambda1K[][k]);
        // Eigenvalues correction
        if(invsqlambda1K[][k] > 1/hmin^2) invsqlambda1K[][k] = 1/hmin^2;
        if(invsqlambda2K[][k] > 1/hmin^2) invsqlambda2K[][k] = 1/hmin^2;
        if(invsqlambda1K[][k] < 1/hmax^2) invsqlambda1K[][k] = 1/hmax^2;
        if(invsqlambda2K[][k] < 1/hmax^2) invsqlambda2K[][k] = 1/hmax^2;
        if(ratio > ratiomax) invsqlambda1K[][k] = invsqlambda2K[][k] / ratiomax^2;
        // Metric assembly
        MK[0][k] = invsqlambda1K[][k] * r10K[][k]^2 + invsqlambda2K[][k] * r11K[][k]^2;
        MK[1][k] = invsqlambda1K[][k] * r10K[][k]*r20K[][k] + invsqlambda2K[][k] * r11K[][k]*r21K[][k];
        MK[2][k] = invsqlambda1K[][k] * r20K[][k]^2 + invsqlambda2K[][k] * r21K[][k]^2;
    }

    // Averaging the Metric
    Vh m11N, m12N, m22N;
    real[int][int] MN(3);
    MN[0].resize(Vh.ndof);
    MN[1].resize(Vh.ndof);
    MN[2].resize(Vh.ndof);
    tensorAveragingNodes(Th, MK, MN);
    m11N[] = MN[0];
    m12N[] = MN[1];
    m22N[] = MN[2];
    if(plots) plot(m11N, wait = true, fill = true, value = true, cmm = "m11");
    if(plots) plot(m12N, wait = true, fill = true, value = true, cmm = "m12");
    if(plots) plot(m22N, wait = true, fill = true, value = true, cmm = "m22");

    // re-meshing
    Th = adaptmesh(Th, metric = [m11N[], m12N[], m22N[]], hmin = hmin, nbvx = nbvx);
    plot(Th, wait = false);

    // Update iterator
    niter ++;
}

plot(Th, cmm = "Adapted mesh", fill = false, wait = true);
// Vh gammah = gamma;
// plot(Th, gammah, cmm = "Adapted mesh", fill = false, wait = true);

cout << "Number of triangles: " << Th.nt << endl;

savemesh(Th, "mesh/gradient_based_aniso_s"+scenario+"_"+TOL+".mesh");

