include "utils.idp"

verbosity = 0;
bool plots = false;

// Options ----

real TOL;
int nitermax = 50;
real hmin = 1e-2;
real hmax = 0.5;
int nbvx = 1e6;


// Data ----

include "../data/data_scenario_1.idp"
// include "../data/data_scenario_2.idp"

if(scenario == 1) TOL = 1.3;
if(scenario == 2) TOL = 3.3;


// Problem discretization ----

// Mesh
mesh Th = square(30, 30);
if(plots) plot(Th, wait = true);

// Functional spaces
fespace Vh(Th, P1);
fespace VhP0(Th, P0);

// Discretized diffusion tensor components
Vh logd11h;
Vh logd12h;
Vh logd22h;

// errors
VhP0 Grad11x, Grad12x, Grad22x;
VhP0 Grad11y, Grad12y, Grad22y;
VhP0 Grad11xStar, Grad12xStar, Grad22xStar;
VhP0 Grad11yStar, Grad12yStar, Grad22yStar;
varf vsqetaK(unused, chiK) = 
    int2d(Th)(
        chiK*(
            (Grad11xStar - Grad11x)^2 + 2*(Grad12xStar - Grad12x)^2 + (Grad22xStar - Grad22x)^2 +
            (Grad11yStar - Grad11y)^2 + 2*(Grad12yStar - Grad12y)^2 + (Grad22yStar - Grad22y)^2
        )
    );


// Adaptation loop ----

// Loop initialization
int niter = 0;
real eta = TOL + 1;

// Adaptation loop
while(niter < nitermax) {

    // Update evaluation
    logd11h = d11;
    logd12h = d12;
    logd22h = d22;

    // Compute gradient
    Grad11x = dx(logd11h);
    Grad12x = dx(logd12h);
    Grad22x = dx(logd22h);
    Grad11y = dy(logd11h);
    Grad12y = dy(logd12h);
    Grad22y = dy(logd22h);

    // Compute recovery gradient
    Grad11xStar = 0;
    Grad12xStar = 0;
    Grad22xStar = 0;
    Grad11yStar = 0;
    Grad12yStar = 0;
    Grad22yStar = 0;
    VhP0 AK = area;
    real[int] areaSum(Th.nt);
    for(int k=0; k<Th.nt; k++)
    {
        int[int] patch = getPatch(Th, k);
        for(int i=0; i<patch.n; i++)
        {
            int index = patch[i];
            areaSum[k] += AK[][index];
            Grad11xStar[][k] += AK[][index] * Grad11x[][index];
            Grad12xStar[][k] += AK[][index] * Grad12x[][index];
            Grad22xStar[][k] += AK[][index] * Grad22x[][index];
            Grad11yStar[][k] += AK[][index] * Grad11y[][index];
            Grad12yStar[][k] += AK[][index] * Grad12y[][index];
            Grad22yStar[][k] += AK[][index] * Grad22y[][index];
        }
        Grad11xStar[][k] /= areaSum[k];
        Grad12xStar[][k] /= areaSum[k];
        Grad22xStar[][k] /= areaSum[k];
        Grad11yStar[][k] /= areaSum[k];
        Grad12yStar[][k] /= areaSum[k];
        Grad22yStar[][k] /= areaSum[k];
    }

    // Compute etaK
    VhP0 sqetaK;
    sqetaK[] = vsqetaK(0, VhP0);
    for(int k = 0; k < Th.nt; k++){
        if(sqetaK[][k]<1e-16) sqetaK[][k] = 1e-16;
    }
    // if(plots) 
    plot(sqetaK, cmm = "sqetaK " + niter,  wait=true, fill=true, value=true);

    // Check global error
    eta = sqrt(sqetaK[].sum);
    // if(eta < TOL) break;

    // Compute hK (new)
    int Nh = Th.nt;
    VhP0 A = area;
    VhP0 Aref = 0.25;
    VhP0 hKnew = pow((TOL^2)/(Nh * Aref * (sqetaK/A)), 1.0/2);
    // plot(hK, cmm = "hK " + niter, wait=true, fill=true, value=true);

    // Averaging
    Vh hNnew;
    hNnew[] = averagingNodes(Th, hKnew[], hmin, hmax);
    if(plots) plot(hNnew, cmm = "hN " + niter, wait=true, fill=true, value=true);

    // Mesh adaptation
    Th = adaptmesh(Th, hNnew, IsMetric = true, nbvx = nbvx);
    // if(plots) 
    plot(Th, cmm = "Th " + niter, wait=1);

    cout << "Iteration: " << niter << endl;
    cout << "TOL: " + TOL << endl;
    cout << "Nh: " << Nh << endl;
    cout << "etaK min: " << sqetaK[].min << endl;
    cout << "etaK max: " << sqetaK[].max << endl;
    cout << "eta: " + eta << endl;
    cout << endl;

    // Solve again
    niter++;

}

plot(Th, cmm = "Final Th", wait=1);

cout << "Number of triangles: " << Th.nt << endl;