load "lapack"
include "utils.idp"

verbosity = 0;
bool plots = false;

// Options ----

bool usingpatch = false;
real TOL = 0.5; // 0.25, 0.5, 1
int nitermax = 30;
real hmin = 1e-2;
real hmax = 0.05;
int nbvx = 1e6;


// Data ----

include "../data/data_scenario_1.idp"
// include "../data/data_scenario_2.idp"


// Problem discretization ----

// Mesh
mesh Th = square(20, 20);
if(plots) plot(Th, wait = true);

// Functional spaces
fespace Vh(Th, P2);
fespace VhP0(Th, P0);
fespace VhP1(Th, P1);

// Discretized diffusion tensor components
Vh logd11hStar, logd12hStar, logd22hStar;
VhP1 logd11h, logd12h, logd22h;

// errors

// errors
varf vg11K(unused, chiK) = int2d(Th)(chiK*(
    square(dx(logd11hStar) - dx(logd11h)) + 
    2*square(dx(logd12hStar) - dx(logd12h)) + 
    square(dx(logd22hStar) - dx(logd22h))
));
varf vg12K(unused, chiK) = int2d(Th)(chiK*(
    (dx(logd11hStar)-dx(logd11h))*(dy(logd11hStar)-dy(logd11h)) + 
    2*(dx(logd12hStar)-dx(logd12h))*(dy(logd12hStar)-dy(logd12h)) +
    (dx(logd22hStar)-dx(logd22h))*(dy(logd22hStar)-dy(logd22h))
));
varf vg22K(unused, chiK) = int2d(Th)(chiK*(
    square(dy(logd11hStar)-dy(logd11h)) + 
    2*square(dy(logd12hStar)-dy(logd12h)) + 
    square(dy(logd22hStar)-dy(logd22h))
));


// Adaptation loop ----

// Loop initialization
int Nh;
int niter = 0;

// Adaptation loop
while(niter < nitermax) {

    // Update
    Nh = Th.nt;
    logd11h = d11;
    logd12h = d12;
    logd22h = d22;
    logd11hStar = d11;
    logd12hStar = d12;
    logd22hStar = d22;

    // Compute gradient
    VhP0 g11K, g12K, g22K;
    g11K[] = vg11K(0, VhP0);
    g12K[] = vg12K(0, VhP0);
    g22K[] = vg22K(0, VhP0);
    if(plots) plot(g11K, cmm = "g11K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(g12K, cmm = "g12K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(g22K, cmm = "g22K " + niter,  wait=true, fill=true, value=true);

    // Compute gradient matrix
    VhP0 AK = area;
    VhP0 APatchK;
    VhP0 G11K, G12K, G22K;
    int[int] patchesSize(Th.nt);
    computeGradientMatrix(Th, APatchK[], patchesSize, usingpatch, g11K[], g12K[], g22K[], G11K[], G12K[], G22K[]);
    if(plots) plot(G11K, cmm = "G11K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(G12K, cmm = "G12K " + niter,  wait=true, fill=true, value=true);
    if(plots) plot(G22K, cmm = "G22K " + niter,  wait=true, fill=true, value=true);

    // Metric at elements
    VhP0 sqetaK, sqeta1K, sqeta2K, invsqlambda1K, invsqlambda2K, r10K, r11K, r20K, r21K;
    real[int][int] MK(3);
    MK[0].resize(Th.nt);
    MK[1].resize(Th.nt);
    MK[2].resize(Th.nt);
    for(int k = 0; k < Th.nt; k++){
        // Gradient matrix on K
        real[int, int] GK(2,2);
        GK(0,0) = G11K[][k];
        GK(0,1) = G12K[][k];
        GK(1,0) = G12K[][k];
        GK(1,1) = G22K[][k];
        real[int] ev(2);
        real[int, int] eV(2, 2);
        // Matrix diagonalization
        EVD(GK, ev, eV, true);
        // Metric elements
        r10K[][k] = eV(0,1);
        r11K[][k] = eV(1,1);
        r20K[][k] = eV(0,0);
        r21K[][k] = eV(1,0);
        real Aref = 0.25;
        sqeta1K[][k] = ev[0];
        sqeta2K[][k] = ev[1];
        invsqlambda1K[][k] = (2 * Nh * (Aref*patchesSize[k]) * (sqeta2K[][k]/APatchK[][k])) / (TOL^2);
        invsqlambda2K[][k] = (2 * Nh * (Aref*patchesSize[k]) * (sqeta1K[][k]/APatchK[][k])) / (TOL^2);
        // Eigenvalues correction
        if(invsqlambda1K[][k] > 1/hmin^2) invsqlambda1K[][k] = 1/hmin^2;
        if(invsqlambda2K[][k] > 1/hmin^2) invsqlambda2K[][k] = 1/hmin^2;
        if(invsqlambda1K[][k] < 1/hmax^2) invsqlambda1K[][k] = 1/hmax^2;
        if(invsqlambda2K[][k] < 1/hmax^2) invsqlambda2K[][k] = 1/hmax^2;
        // Metric assembly
        MK[0][k] = invsqlambda1K[][k] * r10K[][k]^2 + invsqlambda2K[][k] * r11K[][k]^2;
        MK[1][k] = invsqlambda1K[][k] * r10K[][k]*r20K[][k] + invsqlambda2K[][k] * r11K[][k]*r21K[][k];
        MK[2][k] = invsqlambda1K[][k] * r20K[][k]^2 + invsqlambda2K[][k] * r21K[][k]^2;
    }

    // Averaging the Metric
    VhP1 m11N, m12N, m22N;
    real[int][int] MN(3);
    MN[0].resize(VhP1.ndof);
    MN[1].resize(VhP1.ndof);
    MN[2].resize(VhP1.ndof);
    tensorAveragingNodes(Th, MK, MN);
    m11N[] = MN[0];
    m12N[] = MN[1];
    m22N[] = MN[2];
    if(plots) plot(m11N, wait = true, fill = true, value = true, cmm = "m11");
    if(plots) plot(m12N, wait = true, fill = true, value = true, cmm = "m12");
    if(plots) plot(m22N, wait = true, fill = true, value = true, cmm = "m22");

    // re-meshing
    Th = adaptmesh(Th, metric = [m11N[], m12N[], m22N[]], hmin = hmin);
    if(plots) plot(Th, wait = true);


    // Current geometry
    VhP0 hK = hTriangle;
    cout << "Iteration: " << niter << endl;
    cout << "Nh: " << Nh << endl;
    cout << "hmin: " << hK[].min << endl;
    cout << "hmax: " << hK[].max << endl;
    cout << endl;

    // Update iterator
    niter ++;
}

plot(Th, cmm = "Adapted mesh", fill = false, wait = true);
Vh gammah = gamma;
plot(Th, gammah, cmm = "Adapted mesh", fill = false, wait = true);

cout << "Number of triangles: " << Th.nt << endl;