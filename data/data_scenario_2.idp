// Force
func f = 1.;

// Boundary conditions
func gD1 = 0.;
func gD2 = 1.;

// Scenario 2: anisotropic - "quadratic"
int scenario = 2;
func alpha = 1.;
func gamma = (cos(4*pi*(y - x^2)) + 2);
func nux   = 1./sqrt(4*x^2 + 1);
func nuy   = 2*x/sqrt(4*x^2 + 1);

// Diffusion tensor components: d11, d12, d22
func d11 = alpha * (nux^2*gamma + nuy^2/gamma);
func d12 = alpha * (nux*nuy*(gamma - 1./gamma));
func d22 = alpha * (nuy^2*gamma + nux^2/gamma);

// log transformed diffusion tensor components
func logd11 = nux^2*log(alpha*gamma) + nuy^2*log(alpha/gamma);
func logd12 = nux*nuy*log(alpha*gamma) - nux*nuy*log(alpha/gamma);
func logd22 = nuy^2*log(alpha*gamma) + nux^2*log(alpha/gamma);