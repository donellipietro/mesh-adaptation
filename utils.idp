load "lapack"

// EVD

func bool EVD(real[int, int] &M, real[int] &ev, real[int, int] &eV, bool POS) {
    complex[int] cev(2);
    complex[int, int] ceV(2, 2);
    dgeev(M, cev, ceV);
    // real part
    ev[0] = real(cev[0]);
    ev[1] = real(cev[1]);
    eV(0,0) = real(ceV(0,0));
    eV(1,0) = real(ceV(1,0));
    eV(0,1) = real(ceV(0,1));
    eV(1,1) = real(ceV(1,1));
    // ordering 
    if(ev[0] < ev[1]){
        ev[0] = real(cev[1]);
        ev[1] = real(cev[0]);
        eV(0,0) = real(ceV(0,1));
        eV(1,0) = real(ceV(1,1));
        eV(0,1) = -real(ceV(0,0));
        eV(1,1) = -real(ceV(1,0));
    }
    if(POS && ev[0]<=0) ev[0] = 1e-18;
    if(POS && ev[1]<=0) ev[1] = 1e-18;
}

// Averaging

func real[int] averagingNodes(mesh &Th, real[int] &vh0, real vmin, real vmax) {
    fespace VhP1(Th, P1);
    fespace VhP0(Th, P0);
    VhP1 vh1;
    VhP0 AK;

    AK = area;
    real[int] areaSumNode(VhP1.ndof), vhSumNode(VhP1.ndof);
    areaSumNode = 0;
    vhSumNode = 0;
    for(int k=0; k<Th.nt; k++)
    {
        for(int i=0; i<3; i++)
        {
            int index = Th[k][i];
            areaSumNode[index] += AK[][k];
            vhSumNode[index] += AK[][k] * vh0[k];
        }
    }
    for(int n=0; n<VhP1.ndof; n++)
    {
        if(areaSumNode[n] > 1e-30){
            vh1[][n] = vhSumNode[n] / areaSumNode[n];
        } else{
            cout << "Error, element with null area!" << endl;
            break;
        }

        if(vh1[][n] < vmin){
            vh1[][n] = vmin;
        }
        if(vh1[][n] > vmax){
            vh1[][n] = vmax;
        }
    }

    return(vh1[]);
}

/*
mesh Th = square(20, 20);
fespace VhP1(Th, P1);
fespace VhP0(Th, P0);
VhP1 uh1;
VhP0 uh0;

uh0[][50] = 1.;

uh1[] = averagingNodes(Th, uh0[], 0, 3);

plot(uh0, fill = true, wait = true);
plot(uh1, fill = true, wait = true);
*/


// Patch

func int[int] getPatch(mesh &Th, int k) {
    
    int[int] Chi(Th.nt);
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < Th.nt; j++) {
            if(!Chi[j]) {
                if ( (Th[j][0] == Th[k][i]) || (Th[j][1] == Th[k][i]) || (Th[j][2] == Th[k][i]) ) {
                    // patch.resize(patch.n + 1);
                    // patch[patch.n - 1] = Th[j];
                    Chi[j] = true;
                }
            }
        }
    }
    
    int[int] patch(0);
    for (int j = 0; j < Th.nt; j++) {
        if(Chi[j]){
            patch.resize(patch.n + 1);
            patch[patch.n - 1] = j;
        }
    }

    return patch;
}

/*
mesh Th = square(20, 20);
fespace Vh(Th, P0);
Vh uh;

int k = 200;
int[int] patch = getPatch(Th, k);

for(int i = 0; i < patch.n; i++) {
    uh[][patch[i]] = 0.5;
}
uh[][k] = 1;

cout << patch << endl;

plot(Th, wait = 1, fill = 0);
plot(Th, uh, wait = 1, fill = 1);
plot(Th, wait = 1, fill = 0);
*/

// LogEuclidean metric utils

func bool logTensorFiled(mesh &Th, real[int][int] &Dh0, real[int][int] &logDh0) {
    for(int i = 0; i < Dh0[0].n; i++) {
        real[int, int] Di(2,2);
        Di(0,0) = Dh0[0][i];
        Di(0,1) = Dh0[1][i];
        Di(1,0) = Dh0[1][i];
        Di(1,1) = Dh0[2][i];
        real[int] ev(2);
        real[int, int] eV(2, 2);
        EVD(Di, ev, eV, true);
        real[int] r1i = [eV(0,0), eV(1,0)];
        real[int] r2i = [eV(0,1), eV(1,1)];
        logDh0[0][i] = log(ev[0]) * r1i[0]^2 + log(ev[1]) * r2i[0]^2;
        logDh0[1][i] = log(ev[0]) * r1i[0]*r1i[1] + log(ev[1]) * r2i[0]*r2i[1];
        logDh0[2][i] = log(ev[0]) * r1i[1]^2 + log(ev[1]) * r2i[1]^2;
    }
    // cout << logDh0 << endl;
    return(true);
}

func bool expTensorFiled(mesh &Th, real[int][int] &Dh0, real[int][int] &expDh0) {
    for(int i = 0; i < Dh0[0].n; i++) {
        real[int, int] Di(2,2);
        Di(0,0) = Dh0[0][i];
        Di(0,1) = Dh0[1][i];
        Di(1,0) = Dh0[1][i];
        Di(1,1) = Dh0[2][i];
        real[int] ev(2);
        real[int, int] eV(2, 2);
        EVD(Di, ev, eV, false);
        real[int] r1i = [eV(0,0), eV(1,0)];
        real[int] r2i = [eV(0,1), eV(1,1)];
        expDh0[0][i] = exp(ev[0]) * r1i[0]^2 + exp(ev[1]) * r2i[0]^2;
        expDh0[1][i] = exp(ev[0]) * r1i[0]*r1i[1] + exp(ev[1]) * r2i[0]*r2i[1];
        expDh0[2][i] = exp(ev[0]) * r1i[1]^2 + exp(ev[1]) * r2i[1]^2;
    }
    return(true);
}

func bool tensorAveragingNodes(mesh &Th, real[int][int] &Dh0, real[int][int] &Dh0av) {

    real[int][int] logDh0(3);
    logDh0[0].resize(Th.nt);
    logDh0[1].resize(Th.nt);
    logDh0[2].resize(Th.nt);
    logTensorFiled(Th, Dh0, logDh0);

    int ndof = Dh0av[0].n;
    real[int][int] logDhav(3);
    logDhav[0].resize(ndof);
    logDhav[0] = averagingNodes(Th, logDh0[0], -1e9, 1e9);
    logDhav[1].resize(ndof);
    logDhav[1] = averagingNodes(Th, logDh0[1], -1e9, 1e9);
    logDhav[2].resize(ndof);
    logDhav[2] = averagingNodes(Th, logDh0[2], -1e9, 1e9);

    expTensorFiled(Th, logDhav, Dh0av);
    return(true);
    
}

// Aniso

func bool computeGradientMatrix(mesh &Th, real[int] &APatchK, int[int] &patchesSize, bool usingpatch,
                                real[int] &g11K, real[int] &g12K, real[int] &g22K,
                                real[int] &G11K, real[int] &G12K, real[int] &G22K) {
    
    fespace VhP0(Th, P0);

    // compute
    VhP0 AK = area;
    for(int k = 0; k < Th.nt; k++) {
        int[int] patch;
        if(usingpatch) {
            int[int] patchTemp = getPatch(Th, k);
            patch.resize(patchTemp.n);
            patch = patchTemp;
        } else {
            patch.resize(1);
            patch = [k];
        }
        patchesSize[k] = patch.n;
        for(int i = 0; i < patch.n; i++){
            int index = patch[i];
            APatchK[k] += AK[][index];
            G11K[k] += g11K[index];
            G12K[k] += g12K[index];
            G22K[k] += g22K[index];  
        }
    }

}


func bool decomposeTensorField(mesh &Th,
                               real[int] &d11, real[int] &d12, real[int] &d22,
                               real[int] &alpha, real[int] &gamma,
                               real[int] &r10, real[int] &r11, real[int] &r20, real[int] &r21) {
    for(int i = 0; i < d11.n; i++) {
        real[int, int] Di(2,2);
        Di(0,0) = d11[i];
        Di(0,1) = d12[i];
        Di(1,0) = d12[i];
        Di(1,1) = d22[i];
        real[int] ev(2);
        real[int, int] eV(2, 2);
        EVD(Di, ev, eV, true);
        r10[i] = eV(0,0);
        r11[i] = eV(1,0);
        r20[i] = eV(0,1);
        r21[i] = eV(1,1);
        alpha[i] = sqrt(ev[0]*ev[1]);
        gamma[i] = ev[0]/alpha[i];
    }
    return(true);
}


func real computeEccentricity(mesh &Th, int k) {

    real[int][int] Triangle(3);
    Triangle[0].resize(2);
    Triangle[1].resize(2);
    Triangle[2].resize(2);

    for(int i = 0; i<3; ++i){
        Triangle[i][0] = Th[k][i].x;
        Triangle[i][1] = Th[k][i].y;
    }

    real[int] A = Triangle[0];
    real[int] B = Triangle[1];
    real[int] C = Triangle[2];

    // Compute centroid G
    real[int] G(2);
    G[0] = (A[0] + B[0] + C[0])/3;
    G[1] = (A[1] + B[1] + C[1])/3;

    // Centered coordinates
    real[int] An(2), Bn(2), Cn(2);
    An[0] = A[0] - G[0]; An[1] = A[1] - G[1];
    Bn[0] = B[0] - G[0]; Bn[1] = B[1] - G[1];
    Cn[0] = C[0] - G[0]; Cn[1] = C[1] - G[1];

    // Compute covariance matrix (up to scaling)
    real Sxx = (An[0]^2 + Bn[0]^2 + Cn[0]^2)/3;
    real Syy = (An[1]^2 + Bn[1]^2 + Cn[1]^2)/3;
    real Sxy = (An[0]*An[1] + Bn[0]*Bn[1] + Cn[0]*Cn[1])/3;

    // Compute eigenvalues of the covariance matrix
    real trace = Sxx + Syy;
    real det = Sxx*Syy - Sxy^2;
    real delta = sqrt(trace^2/4 - det);
    real lambda1 = trace/2 + delta;
    real lambda2 = trace/2 - delta;

    // Compute eccentricity: e = sqrt(1 - (lambda2/lambda1))
    real ecc = sqrt(1.0 - lambda2/lambda1);

    // Compute r = lambda1/lambda2
    real ratio = lambda1/lambda2;

    // cout << "Eccentricity of the Steiner ellipse: " << ecc << endl;
    // cout << "Ratio of the Steiner ellipse: " << ratio << endl;

    return ratio;

}
